// Generated by CoffeeScript 1.12.7
(function() {
  var Discovery,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = Discovery = (function() {
    Discovery.prototype.server = false;

    Discovery.prototype.origin = '*';

    Discovery.prototype.onDiscovery = null;

    Discovery.prototype.requestInProgress = false;

    function Discovery(target, options) {
      this.target = target;
      if (options == null) {
        options = {};
      }
      this._onMessage = bind(this._onMessage, this);
      this.stopDiscovery = bind(this.stopDiscovery, this);
      if (options.server) {
        this.server = options.server;
      }
      if (options.origin) {
        this.origin = options.origin;
      }
    }

    Discovery.prototype.startDiscovery = function(onDiscovery) {
      if (this.onDiscovery) {
        throw new Error('Discovery is already in progress, call .stopDiscovery() first');
      }
      this.onDiscovery = onDiscovery;
      this.target.addEventListener('message', this._onMessage, false);
      this._beacon();
    };

    Discovery.prototype.stopDiscovery = function() {
      this.onDiscovery = null;
      this.target.removeEventListener('message', this._onMessage);
    };

    Discovery.prototype._beacon = function() {
      var beaconMessage, 
        child, 
        i, 
        len, 
        parent, 
        queue, 
        ref;
      beaconMessage = this.server ? '__cross_frame_dhcp_offer' : '__cross_frame_dhcp_discovery';
      queue = [this.target.top];
      while (queue.length) {
        parent = queue.shift();
        if (parent !== this.target) {
          parent.postMessage(beaconMessage, this.origin);
        }
        ref = parent.frames;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          queue.push(child);
        }
      }
    };

    Discovery.prototype._onMessage = function(event) {
      var data, 
        discovered, 
        match, 
        messageType, 
        origin, 
        ref, 
        reply, 
        source, 
        token;
      source = event.source, origin = event.origin, data = event.data;
      if (origin === 'null' || origin.match('moz-extension:') || window.location.protocol === 'moz-extension:') {
        origin = '*';
      }
      match = typeof data.match === 'function' ? data.match(/^__cross_frame_dhcp_(discovery|offer|request|ack)(?::(\d+))?$/) : void 0;
      if (!match) {
        return;
      }
      messageType = match[1];
      token = match[2];
      ref = this._processMessage(messageType, token, origin), reply = ref.reply, discovered = ref.discovered, token = ref.token;
      if (reply) {
        source.postMessage('__cross_frame_dhcp_' + reply, origin);
      }
      if (discovered) {
        this.onDiscovery.call(null, source, origin, token);
      }
    };

    Discovery.prototype._processMessage = function(messageType, token, origin) {
      var discovered, 
        reply;
      reply = null;
      discovered = false;
      if (this.server) {
        if (messageType === 'discovery') {
          reply = 'offer';
        } else if (messageType === 'request') {
          token = this._generateToken();
          reply = 'ack' + ':' + token;
          discovered = true;
        } else if (messageType === 'offer' || messageType === 'ack') {
          throw new Error('A second Discovery server has been detected at ' + origin + '.\nThis is unsupported and will cause unexpected behaviour.');
        }
      } else if (messageType === 'offer') {
        if (!this.requestInProgress) {
          this.requestInProgress = true;
          reply = 'request';
        }
      } else if (messageType === 'ack') {
        this.requestInProgress = false;
        discovered = true;
      }
      return {
        reply: reply,
        discovered: discovered,
        token: token,
      };
    };

    Discovery.prototype._generateToken = function() {
      return ('' + Math.random()).replace(/\D/g, '');
    };

    return Discovery;

  })();

}).call(this);
